openapi: 3.0.3
info:
  description: ...
  title: ...
  version: 1.0.0

paths:
  /gigs:
    get:
      operationId: listGigs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GigResponse'
          description: List of gigs
      summary: Get a list of gigs
      tags:
        - Gig
    post:
      operationId: createGig
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gig'
          description: Gig created successfully
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGigRequest'
        required: true
      summary: Create a new gig
      tags:
        - Gig

  /gigs/{id}:
    delete:
      operationId: deleteGigById
      parameters:
        - description: The unique ID of the gig
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Gig successfully deleted
        '404':
          description: Gig not found
      summary: Delete a gig by ID
      tags:
        - Gig
    get:
      operationId: getGigById
      parameters:
        - description: The unique ID of the gig
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Gig details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gig'
        '404':
          description: Gig not found
      summary: Get a gig by ID
      tags:
        - Gig

  /posters:
    $ref: './paths/posters_index.yaml'
  /posters/{id}:
    $ref: './paths/posters_id.yaml'

components:
  schemas:
    CreateGigRequest:
      properties:
        date:
          type: string
          format: date
        description:
          type: string
        location:
          $ref: '#/components/schemas/GigLocation'
        pay:
          $ref: '#/components/schemas/Money'
        payType:
          $ref: '#/components/schemas/PayTypeEnum'
        title:
          type: string
      required:
        - date
        - description
        - location
        - pay
        - payType
        - title
      type: object

    Gig:
      properties:
        date:
          $ref: '#/components/schemas/CreateGigRequest/properties/date'
        description:
          type: string
        id:
          type: string
        location:
          $ref: '#/components/schemas/GigLocation'
        pay:
          $ref: '#/components/schemas/Money'
        payType:
          $ref: '#/components/schemas/PayTypeEnum'
        title:
          type: string
      required:
        - date
        - description
        - id
        - location
        - pay
        - payType
        - title
      type: object

    GigResponse:
      properties:
        gigs:
          type: array
          items:
            $ref: '#/components/schemas/Gig'
      required:
        - gigs
      type: object

    # ...
    Coordinates:
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
      required:
        - latitude
        - longitude
      type: object

    GigLocation:
      properties:
        address:
          type: string
        coordinates:
          $ref: '#/components/schemas/Coordinates'
      required:
        - address
        - coordinates
      type: object

    Money:
      type: number
    PayTypeEnum:
      type: string
      enum:
        - FIXED
        - HOURLY

